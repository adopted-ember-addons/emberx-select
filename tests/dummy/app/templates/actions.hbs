<h1>Actions</h1>

{{format-markdown
  "
  `x-select` provides actions that fire on different event types. These actions
  will be kebob-cased event names:
  - `on-change`
  - `on-blur`
  - `on-focus-out`
  - `on-click`


  #### on-blur

  `on-blur` fires anytime the `blur` event is triggered on the x-select
  component. When the action fires it sends two arguments: the value and the
  jQuery event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### on-focus-out

  `on-focus-out` fires anytime the `focusOut` event is triggered on the x-select
  component. When the action fires it sends two arguments: the value and the
  jQuery event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### on-click

  `on-click` fires when x-select is clicked. When the action fires it sends two
  arguments: the value and the jQuery event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### on-disable (x-option)

  `on-disable` fires when x-option detects a change to its `disabled`
  attribute. When the action fires it sends two arguments: the value
  and if it is disabled (boolean).

  ```js
  (value, boolean) => {
    // action body
  }
  ```

  Most of the time all you need is the value that has been selected, but
  sometimes your action requires more context than just that. In those
  cases, you can associate arbitrary attributes with the component
  itself and use them later inside your action handler. For example:

  ```handlebars
  {{#x-select on-change=(action 'didMakeSelection') default='something' as |xs|}}
    <option>Nothing</option>
    {{#xs.option value=something}}Something{{/xs.option}}
  {{/x-select}}
  ```
  then, inside your action handler:

  ```js
  export default Ember.Route.extend({
    actions: {
      didMakeSelection: function(selection, component) {
        if (selection) {
          this.set('selection', selection)
        } else {
          this.set('selection', component.get('default'))
        }
      }
    }
  });
  ```
  "
}}
