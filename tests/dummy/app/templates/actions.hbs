<h1>Actions</h1>

{{format-markdown
  "
  `<XSelect>` provides actions that fire on different event types. These actions
  will be camel-cased event names:
  - `onChange`
  - `onBlur`
  - `onFocusOut`
  - `onClick`


  #### onBlur

  `onBlur` fires anytime the `blur` event is triggered on the `<XSelect>`
  component. When the action fires it sends two arguments: the value and the
  DOM event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### onFocusOut

  `onFocusOut` fires anytime the `focusOut` event is triggered on the `<XSelect>`
  component. When the action fires it sends two arguments: the value and the
  DOM event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### onClick

  `onClick` fires when `<XSelect>` is clicked. When the action fires it sends two
  arguments: the value and the DOM event.

  ```js
  (value, event) => {
    // action body
  }
  ```

  #### onDisable (x-option)

  `onDisable` fires when x-option detects a change to its `disabled`
  attribute. When the action fires it sends two arguments: the value
  and if it is disabled (boolean).

  ```js
  (value, boolean) => {
    // action body
  }
  ```

  Most of the time all you need is the value that has been selected, but
  sometimes your action requires more context than just that. In those
  cases, you can pass any arguments you need from the template. For
  example:

  ```handlebars
  <XSelect @onClick={{action 'didMakeSelection' isXSelectRequired}} @required={{isXSelectRequired}} as |xs|>
    <option>Nothing</option>
    <xs.option value={{something}}>Something</xs.option>
  </XSelect>
  ```

  then, inside your action handler:

  ```js
  import Controller from '@ember/controller';

  export default Controller.extend({
    actions: {
      didMakeSelection(value, event, isXSelectRequired) {
        if (!value & isXSelectRequired) {
          this.set('error', 'You must fill out this field');
        } else {
          this.set('selection', value);
        }
      }
    }
  });
  ```
  "
}}
